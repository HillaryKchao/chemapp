{"version":3,"sources":["components/name_page/NamePage.module.scss","App.module.scss","utilities/Shuffle.ts","components/ToggleSwitch/ToggleSwitch.tsx","components/name_page/NamePage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Shuffle","array","i","length","j","Math","floor","random","ToggleSwitch","props","optionLabels","small","disabled","id","checked","name","onChange","styleOptions","className","style","type","e","target","htmlFor","data-yes","data-no","compoundData","cloneDeep","compoundJson","NamePage","useState","showAnswer","setShowAnswer","reload","setReload","divRef","useRef","useEffect","current","typeset","selector","mathJax","window","MathJax","startup","promise","then","typesetPromise","catch","err","console","error","message","ref","styles","OptionRow","marginTop","RoundButton","marginRight","onClick","event","forEach","value","index","nameFirst","ToggleContainer","val","marginLeft","map","compound","key","textAlign","formula","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wFACAA,EAAOC,QAAU,CAAC,UAAY,4BAA4B,UAAY,4BAA4B,gBAAkB,kCAAkC,YAAc,gC,mBCApKD,EAAOC,QAAU,CAAC,UAAY,uBAAuB,IAAM,mB,02CCY5CC,EAbC,SAACC,GACf,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADC,EAQlB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GARkC,KAQ9BD,EAAMG,GARwB,OC+D9BI,G,MAjDM,SAACC,GAA8B,IAAD,EAU7CA,EARFC,oBAF+C,MAEhC,CAAC,MAAO,MAFwB,IAU7CD,EAPFE,aAH+C,WAU7CF,EANFG,gBAJ+C,SAK/CC,EAKEJ,EALFI,GACAC,EAIEL,EAJFK,QACAC,EAGEN,EAHFM,KACAC,EAEEP,EAFFO,SAR+C,EAU7CP,EADFQ,oBAT+C,MAShC,GATgC,EAWjD,OACE,yBACEC,UAAW,iBAAmBP,EAAQ,gBAAkB,IACxDQ,MAAOF,GAEP,2BACEG,KAAK,WACLL,KAAMA,EACNG,UAAU,yBACVL,GAAIA,EACJC,QAASA,EACTE,SAAU,SAACK,GAAD,OAAOL,EAASK,EAAEC,OAAOR,UACnCF,SAAUA,IAEXC,EACC,2BAAOK,UAAU,sBAAsBK,QAASV,GAC9C,0BACEK,UACEN,EACI,6CACA,sBAENY,WAAUd,EAAa,GACvBe,UAASf,EAAa,KAExB,0BACEQ,UACEN,EACI,8CACA,0BAIR,Q,uBC/CJc,EAA+BC,oBAAUC,GAqHhCC,EAnHE,WAAO,IAAD,EACeC,oBAAS,GADxB,mBACdC,EADc,KACFC,EADE,OAEOF,oBAAS,GAFhB,mBAEdG,EAFc,KAENC,EAFM,KAGfC,EAASC,iBAA8B,MAE7CC,qBAAU,WACJF,EAAOG,SACTC,GAAQ,kBAAMJ,EAAOG,aAEtB,CAACP,EAAYE,IAEhB,IAWMM,EAAU,SAACC,GACf,IAAMC,EAAWC,OAAeC,QAGhC,OAAKF,GAIAA,EAAQG,QAAQC,SAIrBJ,EAAQG,QAAQC,QAAUJ,EAAQG,QAAQC,QACvCC,MAAK,WAGJ,OAFAZ,GAAU,GACVM,IACOC,EAAQM,oBAEhBC,OAAM,SAACC,GAAD,OAAcC,QAAQC,MAAR,0BAAiCF,EAAIG,aACrDX,EAAQG,QAAQC,SAdd,MA6BX,OACE,yBAAKQ,IAAKlB,GACR,yBAAKjB,UAAWoC,IAAOC,UAAWpC,MAAO,CAAEqC,UAAW,SACpD,yBACEtC,UAAWoC,IAAOG,YAClBtC,MAAO,CAAEuC,YAAa,SACtBC,QAda,SACnBC,GArCA5D,EAAQ0B,GACRA,EAAamC,SAAQ,SAACC,EAAOC,GACvB1D,KAAKE,SAAW,GAClBuD,EAAME,WAAY,EAElBF,EAAME,WAAY,KAmCtB9B,GAAU,GACVF,GAAc,KAMV,UAOA,yBAAKd,UAAWoC,IAAOW,iBACrB,kBAAC,EAAD,CACEpD,GAAE,cACFE,KAAI,cACJC,SA1BW,SAACkD,GACpBlC,EAAckC,IA0BNpD,QAASiB,EACTrB,aAAc,CAAC,OAAQ,UAEzB,2BAAOa,QAAQ,eAAf,oCAGJ,yBAAKJ,MAAO,CAAEqC,UAAW,SACvB,2BAAOrC,MAAO,CAAEgD,WAAY,OAAQT,YAAa,SAC/C,+BACGhC,EAAa0C,KAAI,SAACC,EAAUN,GAC3B,OAAOhC,EACL,wBAAIuC,IAAKP,GACP,wBAAI5C,MAAO,CAAEoD,UAAW,UACrBF,EAASL,UACNK,EAAStD,KADZ,kBAEcsD,EAASG,QAFvB,SAIH,wBAAIrD,MAAO,CAAEoD,UAAW,SACrBF,EAASL,UAAT,kBACcK,EAASG,QADvB,QAEGH,EAAStD,OAIjB,wBAAIuD,IAAKP,GACP,wBAAI5C,MAAO,CAAEoD,UAAW,UACrBF,EAASL,UACNK,EAAStD,KADZ,kBAEcsD,EAASG,QAFvB,SAIH,wBAAIrD,MAAO,CAAEoD,UAAW,SACrB,IADH,kCCvGHE,MARf,WACE,OACE,yBAAKvD,UAAWoC,IAAOmB,KACrB,kBAAC,EAAD,QCKcC,QACW,cAA7BhC,OAAOiC,SAASC,UAEe,UAA7BlC,OAAOiC,SAASC,UAEhBlC,OAAOiC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdvC,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAMC,c","file":"static/js/main.031d52aa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"NamePage_container__dDnOV\",\"OptionRow\":\"NamePage_OptionRow__3ErJp\",\"ToggleContainer\":\"NamePage_ToggleContainer__22yaH\",\"RoundButton\":\"NamePage_RoundButton__3aA7s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__eSJ6i\",\"App\":\"App_App__15LM-\"};","const Shuffle = (array: any[]) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\n\n    // swap elements array[i] and array[j]\n    // we use \"destructuring assignment\" syntax to achieve that\n    // you'll find more details about that syntax in later chapters\n    // same can be written as:\n    // let t = array[i]; array[i] = array[j]; array[j] = t\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n};\n\nexport default Shuffle;\n","import React from \"react\";\n\nimport \"./ToggleSwitch.scss\";\n\ntype ToggleSwitchProps = {\n  id: string;\n  checked: boolean;\n  name: string;\n  optionLabels?: string[];\n  small?: boolean;\n  disabled?: boolean;\n  onChange: (val: boolean) => void;\n  styleOptions?: React.CSSProperties;\n};\n\nconst ToggleSwitch = (props: ToggleSwitchProps) => {\n  const {\n    optionLabels = [\"Yes\", \"No\"],\n    small = false,\n    disabled = false,\n    id,\n    checked,\n    name,\n    onChange,\n    styleOptions = {},\n  } = props;\n  return (\n    <div\n      className={\"toggle-switch\" + (small ? \" small-switch\" : \"\")}\n      style={styleOptions}\n    >\n      <input\n        type=\"checkbox\"\n        name={name}\n        className=\"toggle-switch-checkbox\"\n        id={id}\n        checked={checked}\n        onChange={(e) => onChange(e.target.checked)}\n        disabled={disabled}\n      />\n      {id ? (\n        <label className=\"toggle-switch-label\" htmlFor={id}>\n          <span\n            className={\n              disabled\n                ? \"toggle-switch-inner toggle-switch-disabled\"\n                : \"toggle-switch-inner\"\n            }\n            data-yes={optionLabels[0]}\n            data-no={optionLabels[1]}\n          />\n          <span\n            className={\n              disabled\n                ? \"toggle-switch-switch toggle-switch-disabled\"\n                : \"toggle-switch-switch\"\n            }\n          />\n        </label>\n      ) : null}\n    </div>\n  );\n};\n\nexport default ToggleSwitch;\n","import React, { useRef, useEffect, useState } from \"react\";\nimport { cloneDeep } from \"lodash\";\n\n// import { typeset } from \"../../utilities/MathJaxUtils\";\nimport Shuffle from \"../../utilities/Shuffle\";\n\nimport ToggleSwitch from \"../ToggleSwitch/ToggleSwitch\";\n\nimport styles from \"./NamePage.module.scss\";\n\nimport { INameFormula } from \"../../models/NameFormula.model\";\nimport compoundJson from \"../../data/CompounNames.json\";\nconst compoundData: INameFormula[] = cloneDeep(compoundJson as INameFormula[]);\n\nconst NamePage = () => {\n  const [showAnswer, setShowAnswer] = useState(false);\n  const [reload, setReload] = useState(false);\n  const divRef = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    if (divRef.current) {\n      typeset(() => divRef.current!);\n    }\n  }, [showAnswer, reload]);\n\n  const ShuffleData = () => {\n    Shuffle(compoundData);\n    compoundData.forEach((value, index) => {\n      if (Math.random() < 0.5) {\n        value.nameFirst = true;\n      } else {\n        value.nameFirst = false;\n      }\n    });\n  };\n\n  const typeset = (selector: () => HTMLElement) => {\n    const mathJax = (window as any).MathJax;\n    // If MathJax script hasn't been loaded yet, then do nothing.\n\n    if (!mathJax) {\n      return null;\n    }\n\n    if (!mathJax.startup.promise) {\n      return null;\n    }\n\n    mathJax.startup.promise = mathJax.startup.promise\n      .then(() => {\n        setReload(false);\n        selector();\n        return mathJax.typesetPromise();\n      })\n      .catch((err: any) => console.error(`Typeset failed: ${err.message}`));\n    return mathJax.startup.promise;\n  };\n\n  const handleToggle = (val: boolean) => {\n    setShowAnswer(val);\n  };\n\n  const handleReload = (\n    event: React.MouseEvent<HTMLDivElement, MouseEvent>\n  ) => {\n    ShuffleData();\n    setReload(true);\n    setShowAnswer(false);\n  };\n\n  return (\n    <div ref={divRef}>\n      <div className={styles.OptionRow} style={{ marginTop: \"50px\" }}>\n        <div\n          className={styles.RoundButton}\n          style={{ marginRight: \"100px\" }}\n          onClick={handleReload}\n        >\n          RELOAD\n        </div>\n        <div className={styles.ToggleContainer}>\n          <ToggleSwitch\n            id={`checkanswer`}\n            name={`checkanswer`}\n            onChange={handleToggle}\n            checked={showAnswer}\n            optionLabels={[\"Show\", \"Hide\"]}\n          ></ToggleSwitch>\n          <label htmlFor=\"checkanswer\">When ready, check your answer!</label>\n        </div>\n      </div>\n      <div style={{ marginTop: \"30px\" }}>\n        <table style={{ marginLeft: \"auto\", marginRight: \"auto\" }}>\n          <tbody>\n            {compoundData.map((compound, index) => {\n              return showAnswer ? (\n                <tr key={index}>\n                  <td style={{ textAlign: \"right\" }}>\n                    {compound.nameFirst\n                      ? compound.name\n                      : `\\\\(\\\\ce{${compound.formula}}\\\\)`}\n                  </td>\n                  <td style={{ textAlign: \"left\" }}>\n                    {compound.nameFirst\n                      ? `\\\\(\\\\ce{${compound.formula}}\\\\)`\n                      : compound.name}\n                  </td>\n                </tr>\n              ) : (\n                <tr key={index}>\n                  <td style={{ textAlign: \"right\" }}>\n                    {compound.nameFirst\n                      ? compound.name\n                      : `\\\\(\\\\ce{${compound.formula}}\\\\)`}\n                  </td>\n                  <td style={{ textAlign: \"left\" }}>\n                    {\" \"}\n                    {`_____________________`}\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default NamePage;\n","import React from \"react\";\nimport styles from \"./App.module.scss\";\nimport NamePage from \"./components/name_page/NamePage\";\n\nfunction App() {\n  return (\n    <div className={styles.App}>\n      <NamePage></NamePage>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}